import telebot
import json
from telebot import types
from PageInfo import get_page_info
import re
from pyspark.sql import SparkSession

from SparkUpdateTables import update_df_user_vendor_code, update_df_link_vendor_code
from SparkUpdateTables import check_df_user_vendor_code, check_df_link_vendor_code
from analytics.prices import get_vendor_code_by_link, get_price_history, save_prices_plot

with open("secrets/bot_secrets.json", 'r') as f:
    bot_secret = json.load(f)['token']

bot = telebot.TeleBot(bot_secret)
pattern = r'https?://\S+'

spark = SparkSession.builder\
                .master("local[*]")\
                .appName('yurkin_tg_bot')\
                .getOrCreate()


def menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.row(types.KeyboardButton('‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'))
    markup.row(types.KeyboardButton('üìà–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞'))
    bot.send_message(chat_id, text='–ú–µ–Ω—é:', reply_markup=markup)


@bot.message_handler(commands=['start'])
def main(message):
    bot.send_message(message.chat.id, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ!')
    menu(message.chat.id)


@bot.message_handler(func=lambda msg: msg.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
def get_link(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Ç–æ–≤–∞—Ä–∞ –ó–Ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
    bot.register_next_step_handler_by_chat_id(chat_id, get_link_callback)


def get_link_callback(message):
    user_id = message.from_user.id
    if 'goldapple.ru' in message.text:
        link = re.findall(pattern,message.text)[0]
        info_link = get_page_info(link)
        vendor_code = int(info_link[0])
        goods_name = info_link[1]
        user_vendor_code_update = (user_id, vendor_code)
        link_vendor_code_update = (link, vendor_code, goods_name)
        bot.send_message(
            user_id,
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–º –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –≤–∞—Å. –ù–∞–ø—Ä–∏–º–µ—Ä, 25. "
            "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ -"
        )
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_min_discount, user_vendor_code_update=user_vendor_code_update)
        if check_df_link_vendor_code(link_vendor_code_update, spark=spark) < 1:
            print("--------> check link_vendor ok")
            update_df_link_vendor_code(link_vendor_code_update, spark=spark)
            print("--------> update link_vendor ok")
    else:
        bot.send_message(user_id, "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –ó–Ø (((")


def get_min_discount(message, user_vendor_code_update: tuple):
    user_id = message.from_user.id
    discount_percent = message.text.replace("%", "")
    if discount_percent.isdigit() or discount_percent == "-":
        row = (*user_vendor_code_update, int(discount_percent) if discount_percent else None)
        if check_df_user_vendor_code(row, spark=spark) < 1:
            print("--------> check user_vendor ok")
            bot.send_message(
                user_id,
                f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –±–∞–∑—É..."
            )
            update_df_user_vendor_code(row, spark=spark)
            print("--------> update user_vendor ok")
            bot.send_message(
                user_id,
                "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å. "
                "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ —Ç–æ–≤–∞—Ä–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π /???"
            )
    else:
        bot.send_message(
            user_id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20"
        )
        bot.register_next_step_handler(message, get_min_discount)


@bot.message_handler(func=lambda msg: msg.text == 'üìà–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞')
def plot_prices(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, —Ü–µ–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç")
    bot.register_next_step_handler_by_chat_id(user_id, plot_prices_callback)


def plot_prices_callback(message):
    user_id = message.from_user.id
    link = re.findall(pattern, message.text)[0]
    vendor_code = get_vendor_code_by_link(link, spark)
    if not vendor_code:
        bot.send_message(user_id, "–£ –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞‚òπÔ∏è")
    else:
        price_history = get_price_history(vendor_code, spark)
        if not price_history:
            bot.send_message(user_id, "–£ –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞‚òπÔ∏è")
        else:
            plot_path = save_prices_plot(price_history)
            with open(plot_path, "rb") as image:
                bot.send_photo(user_id, image)
            plot_path.unlink()

bot.infinity_polling()
